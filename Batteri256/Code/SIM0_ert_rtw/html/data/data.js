var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"model/SIM0","ref":false,"files":[{"name":"ert_main.c","type":"source","group":"main","path":"C:\\Users\\oscar\\Documents\\GitHub\\AMS-model\\Batteri256\\Code\\SIM0_ert_rtw","tag":"","groupDisplay":"Main file","code":"#include <stddef.h>\r\n#include <stdio.h>\r\n#include \"SIM0.h\"\r\n\r\nvoid rt_OneStep(void);\r\nvoid rt_OneStep(void)\r\n{\r\n  static boolean_T OverrunFlag = false;\r\n  if (OverrunFlag) {\r\n    rtmSetErrorStatus(SIM0_M, \"Overrun\");\r\n    return;\r\n  }\r\n\r\n  OverrunFlag = true;\r\n  SIM0_step();\r\n  OverrunFlag = false;\r\n}\r\n\r\nint_T main(int_T argc, const char *argv[])\r\n{\r\n  (void)(argc);\r\n  (void)(argv);\r\n  SIM0_initialize();\r\n  printf(\"Warning: The simulation will run forever. \"\r\n         \"Generated ERT main won't simulate model step behavior. \"\r\n         \"To change this behavior select the 'MAT-file logging' option.\\n\");\r\n  fflush((NULL));\r\n  while (rtmGetErrorStatus(SIM0_M) == (NULL)) {\r\n  }\r\n\r\n  SIM0_terminate();\r\n  return 0;\r\n}\r\n"},{"name":"SIM0.c","type":"source","group":"model","path":"C:\\Users\\oscar\\Documents\\GitHub\\AMS-model\\Batteri256\\Code\\SIM0_ert_rtw","tag":"","groupDisplay":"Model files","code":"#include \"SIM0.h\"\r\n#include <math.h>\r\n#include <string.h>\r\n#include \"rtwtypes.h\"\r\n#include \"look1_binlxpw.h\"\r\n\r\nDW_SIM0_T SIM0_DW;\r\nExtU_SIM0_T SIM0_U;\r\nExtY_SIM0_T SIM0_Y;\r\nstatic RT_MODEL_SIM0_T SIM0_M_;\r\nRT_MODEL_SIM0_T *const SIM0_M = &SIM0_M_;\r\nvoid SIM0_step(void)\r\n{\r\n  real_T rtb_Memory15[126];\r\n  real_T rtb_Memory21[126];\r\n  real_T rtb_Rpz[126];\r\n  real_T rtb_Rsz[126];\r\n  real_T rtb_Switch[126];\r\n  real_T rtb_Current;\r\n  real_T rtb_Exp;\r\n  real_T rtb_Memory20;\r\n  real_T rtb_Memory22;\r\n  real_T rtb_Product1_n;\r\n  real_T rtb_Product9;\r\n  real_T rtb_current;\r\n  real_T rtb_is_drive;\r\n  real_T rtb_y;\r\n  int32_T i;\r\n  int32_T iU;\r\n  int32_T rtb_is_charge;\r\n  boolean_T rtb_Logic_idx_0;\r\n  boolean_T rtb_Logic_p_idx_0;\r\n  rtb_Memory20 = SIM0_DW.Memory20_PreviousInput;\r\n  rtb_Exp = exp(SIM0_P.Cap_det / (SIM0_P.C_r * 3600.0) *\r\n                SIM0_DW.Memory9_PreviousInput);\r\n  for (i = 0; i < 126; i++) {\r\n    rtb_Memory15[i] = SIM0_DW.Memory15_PreviousInput[i];\r\n    rtb_Memory22 = SIM0_DW.Memory_PreviousInput[i] /\r\n      SIM0_DW.Memory10_PreviousInput[i];\r\n    rtb_Product1_n = look1_binlxpw(rtb_Memory22, SIM0_P.soc, SIM0_P.Rs, 12U);\r\n    rtb_is_drive = look1_binlxpw(rtb_Memory22, SIM0_P.soc, SIM0_P.tau, 12U);\r\n    rtb_Product9 = rtb_Product1_n * rtb_is_drive;\r\n    rtb_Product1_n = (rtb_Product1_n + look1_binlxpw(rtb_Memory22, SIM0_P.soc,\r\n      SIM0_P.Rp, 12U)) * SIM0_P.Ts;\r\n    rtb_Product1_n = (((2.0 * rtb_Product9 + rtb_Product1_n) * rtb_Memory20 +\r\n                       (rtb_Product1_n - 2.0 * rtb_Product9) *\r\n                       SIM0_DW.Memory11_PreviousInput) - (SIM0_P.Ts - 2.0 *\r\n      rtb_is_drive) * SIM0_DW.Memory12_PreviousInput[i]) / (2.0 * rtb_is_drive +\r\n      SIM0_P.Ts);\r\n    rtb_is_drive = rtb_Product1_n + look1_binlxpw(rtb_Memory22, SIM0_P.soc,\r\n      SIM0_P.ocv, 12U);\r\n    SIM0_Y.cell_voltages[i] = rtb_is_drive;\r\n    SIM0_Y.cell_socs[i] = rtb_Memory22;\r\n    SIM0_Y.cell_capacities[i] = SIM0_DW.Memory10_PreviousInput[i];\r\n    rtb_Memory21[i] = SIM0_DW.Memory10_PreviousInput[i] * rtb_Exp;\r\n    rtb_Rsz[i] = rtb_Product1_n;\r\n    rtb_Rpz[i] = rtb_is_drive;\r\n  }\r\n\r\n  rtb_Exp = SIM0_P.Ts * rtb_Memory20;\r\n  for (i = 0; i < 126; i++) {\r\n    rtb_Switch[i] = SIM0_DW.Memory21_PreviousInput[i] / SIM0_P.R_short\r\n      * SIM0_DW.Memory19_PreviousInput[i] * SIM0_P.Gain_Gain + (rtb_Exp +\r\n      SIM0_DW.Memory_PreviousInput[i]);\r\n  }\r\n\r\n  boolean_T rtb_Logic_idx_1;\r\n  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory1_PreviousInput != 0.0) << 1) +\r\n                  (SIM0_DW.Memory2_PreviousInput != 0.0)) << 1) +\r\n                SIM0_DW.Memory_PreviousInput_m);\r\n  rtb_Logic_idx_0 = SIM0_P.Logic_table[(uint32_T)i];\r\n  rtb_Logic_idx_1 = SIM0_P.Logic_table[i + 8U];\r\n  SIM0_Y.AMS_error_latched = rtb_Logic_idx_0;\r\n  i = (int32_T)(((((uint32_T)(SIM0_DW.Memory3_PreviousInput != 0.0) << 1) +\r\n                  (SIM0_DW.Memory4_PreviousInput != 0.0)) << 1) +\r\n                SIM0_DW.Memory_PreviousInput_c);\r\n  rtb_Logic_p_idx_0 = SIM0_P.Logic_table_p[(uint32_T)i];\r\n  SIM0_Y.IMD_error_latched = rtb_Logic_p_idx_0;\r\n  rtb_Memory22 = (rtb_Logic_idx_1 ? (real_T)SIM0_P.Logic_table_p[i + 8U] : 0.0) *\r\n    SIM0_DW.Memory5_PreviousInput;\r\n  SIM0_Y.SC_probe = rtb_Memory22;\r\n  rtb_Exp = rtb_Memory22 * SIM0_DW.Delay1_DSTATE;\r\n  SIM0_Y.precharge_closed = rtb_Exp;\r\n  rtb_Product1_n = rtb_Memory22 * SIM0_DW.Delay2_DSTATE[0];\r\n  rtb_Memory22 *= SIM0_DW.Delay3_DSTATE[0];\r\n  i = 1;\r\n  rtb_is_charge = 0;\r\n  rtb_is_drive = 0.0;\r\n  if (SIM0_DW.Memory6_PreviousInput != 0.0) {\r\n    i = 2;\r\n    rtb_is_charge = 1;\r\n  } else if (SIM0_DW.Memory7_PreviousInput != 0.0) {\r\n    i = 3;\r\n    rtb_is_drive = 1.0;\r\n  }\r\n\r\n  rtb_Product9 = rtb_Memory22 * rtb_Product1_n;\r\n  rtb_is_drive = rtb_is_drive * SIM0_DW.Memory22_PreviousInput * rtb_Product9;\r\n  rtb_y = rtb_Memory15[0];\r\n  for (iU = 0; iU < 125; iU++) {\r\n    rtb_y += rtb_Memory15[iU + 1];\r\n  }\r\n\r\n  if (SIM0_DW.Memory16_PreviousInput != 0.0) {\r\n    rtb_Current = SIM0_DW.Memory17_PreviousInput - rtb_y;\r\n    if (rtb_Current < 0.0) {\r\n      rtb_Current = 0.0;\r\n    }\r\n\r\n    if (SIM0_DW.Memory18_PreviousInput < rtb_Current) {\r\n      rtb_Current = SIM0_DW.Memory18_PreviousInput;\r\n    }\r\n  } else {\r\n    rtb_Current = 0.0;\r\n  }\r\n\r\n  rtb_current = 0.0;\r\n  if (i == 1) {\r\n    rtb_Exp = -1.0;\r\n  } else if (i == 2) {\r\n    if (rtb_Memory22 != 0.0) {\r\n      if ((rtb_Product1_n != 0.0) || (rtb_Exp != 0.0)) {\r\n        rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) +\r\n          SIM0_DW.Memory_PreviousInput_a;\r\n        rtb_current = (real_T)rtb_is_charge * rtb_Current * rtb_Product9;\r\n      } else {\r\n        rtb_Exp = (SIM0_DW.Memory17_PreviousInput -\r\n                   SIM0_DW.Memory_PreviousInput_a) +\r\n          SIM0_DW.Memory_PreviousInput_a;\r\n      }\r\n    } else {\r\n      rtb_Exp = -1.0;\r\n    }\r\n  } else if (rtb_Memory22 != 0.0) {\r\n    if (rtb_Product1_n != 0.0) {\r\n      rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) * 0.8 +\r\n        SIM0_DW.Memory_PreviousInput_a;\r\n      rtb_current = rtb_is_drive - (rtb_y - rtb_Exp) / 0.5;\r\n    } else if (rtb_Exp != 0.0) {\r\n      rtb_Exp = (rtb_y - SIM0_DW.Memory_PreviousInput_a) / 50.0 +\r\n        SIM0_DW.Memory_PreviousInput_a;\r\n      rtb_current = rtb_is_drive - (rtb_y - rtb_Exp) / 100.0;\r\n    } else {\r\n      rtb_Exp = (0.0 - SIM0_DW.Memory_PreviousInput_a) / 5.0 +\r\n        SIM0_DW.Memory_PreviousInput_a;\r\n      rtb_current = -(0.0 - rtb_Exp) / 10.0;\r\n    }\r\n  } else {\r\n    rtb_Exp = -1.0;\r\n  }\r\n\r\n  SIM0_Y.vehicle_voltage = rtb_Exp;\r\n  SIM0_Y.current = rtb_current;\r\n  SIM0_Y.accumulator_voltage = rtb_y;\r\n  SIM0_Y.AIR_minus_closed = rtb_Memory22;\r\n  SIM0_Y.AIR_plus_closed = rtb_Product1_n;\r\n  memcpy(&SIM0_Y.cell_temperatures[0], &SIM0_P.cTmp[0], 60U * sizeof(real_T));\r\n  SIM0_Y.IMD_ok = SIM0_P.IMD_ok;\r\n  SIM0_DW.Memory20_PreviousInput = rtb_current;\r\n  SIM0_DW.Memory11_PreviousInput = rtb_Memory20;\r\n  SIM0_DW.Memory9_PreviousInput = fabs(rtb_Memory20 +\r\n    SIM0_DW.Memory9_PreviousInput);\r\n  for (i = 0; i < 126; i++) {\r\n    rtb_Memory22 = rtb_Memory21[i];\r\n    rtb_Memory20 = rtb_Switch[i];\r\n    rtb_is_drive = rtb_Rpz[i];\r\n    SIM0_DW.Memory15_PreviousInput[i] = rtb_is_drive;\r\n    SIM0_DW.Memory12_PreviousInput[i] = rtb_Rsz[i];\r\n    if (rtb_Memory20 > rtb_Memory22) {\r\n      SIM0_DW.Memory_PreviousInput[i] = rtb_Memory22;\r\n    } else if (rtb_Memory20 < SIM0_P.Constant1_Value) {\r\n      SIM0_DW.Memory_PreviousInput[i] = SIM0_P.Constant1_Value;\r\n    } else {\r\n      SIM0_DW.Memory_PreviousInput[i] = rtb_Memory20;\r\n    }\r\n\r\n    SIM0_DW.Memory10_PreviousInput[i] = rtb_Memory22;\r\n    SIM0_DW.Memory19_PreviousInput[i] = SIM0_U.BalanceOut[i];\r\n    SIM0_DW.Memory21_PreviousInput[i] = rtb_is_drive;\r\n  }\r\n\r\n  SIM0_DW.Memory1_PreviousInput = SIM0_U.AMS_error;\r\n  SIM0_DW.Memory2_PreviousInput = SIM0_U.AMS_error_reset;\r\n  SIM0_DW.Memory_PreviousInput_m = rtb_Logic_idx_0;\r\n  SIM0_DW.Memory3_PreviousInput = SIM0_U.IMD_error;\r\n  SIM0_DW.Memory4_PreviousInput = SIM0_U.IMD_error_reset;\r\n  SIM0_DW.Memory_PreviousInput_c = rtb_Logic_p_idx_0;\r\n  SIM0_DW.Memory5_PreviousInput = SIM0_U.SC;\r\n  SIM0_DW.Delay1_DSTATE = SIM0_DW.Memory14_PreviousInput;\r\n  SIM0_DW.Delay3_DSTATE[0] = SIM0_DW.Delay3_DSTATE[1];\r\n  SIM0_DW.Delay3_DSTATE[1] = SIM0_DW.Memory8_PreviousInput;\r\n  SIM0_DW.Delay2_DSTATE[0] = SIM0_DW.Delay2_DSTATE[1];\r\n  SIM0_DW.Delay2_DSTATE[1] = SIM0_DW.Memory13_PreviousInput;\r\n  SIM0_DW.Memory6_PreviousInput = SIM0_U.charge;\r\n  SIM0_DW.Memory7_PreviousInput = SIM0_U.drive;\r\n  SIM0_DW.Memory22_PreviousInput = SIM0_U.drive_current;\r\n  SIM0_DW.Memory17_PreviousInput = SIM0_U.VoltageLimit;\r\n  SIM0_DW.Memory16_PreviousInput = SIM0_U.EnableCharge;\r\n  SIM0_DW.Memory18_PreviousInput = SIM0_U.CurrentLimit;\r\n  SIM0_DW.Memory_PreviousInput_a = rtb_Exp;\r\n  SIM0_DW.Memory13_PreviousInput = SIM0_U.EnableAirPlus;\r\n  SIM0_DW.Memory14_PreviousInput = SIM0_U.EnablePrecharge;\r\n  SIM0_DW.Memory8_PreviousInput = SIM0_U.EnableAirMinus;\r\n}\r\n\r\nvoid SIM0_initialize(void)\r\n{\r\n  {\r\n    int32_T i;\r\n    SIM0_DW.Memory20_PreviousInput = SIM0_P.Memory20_InitialCondition;\r\n    SIM0_DW.Memory11_PreviousInput = SIM0_P.Memory11_InitialCondition;\r\n    SIM0_DW.Memory9_PreviousInput = SIM0_P.Memory9_InitialCondition;\r\n    for (i = 0; i < 126; i++) {\r\n      SIM0_DW.Memory15_PreviousInput[i] = SIM0_P.Memory15_InitialCondition;\r\n      SIM0_DW.Memory12_PreviousInput[i] = SIM0_P.Memory12_InitialCondition[i];\r\n      SIM0_DW.Memory_PreviousInput[i] = SIM0_P.cQur[i];\r\n      SIM0_DW.Memory10_PreviousInput[i] = SIM0_P.cCap[i];\r\n      SIM0_DW.Memory19_PreviousInput[i] = SIM0_P.Memory19_InitialCondition;\r\n      SIM0_DW.Memory21_PreviousInput[i] = SIM0_P.Memory21_InitialCondition;\r\n    }\r\n\r\n    SIM0_DW.Memory1_PreviousInput = SIM0_P.Memory1_InitialCondition;\r\n    SIM0_DW.Memory2_PreviousInput = SIM0_P.Memory2_InitialCondition;\r\n    SIM0_DW.Memory_PreviousInput_m = SIM0_P.SRFlipFlop2_initial_condition;\r\n    SIM0_DW.Memory3_PreviousInput = SIM0_P.Memory3_InitialCondition;\r\n    SIM0_DW.Memory4_PreviousInput = SIM0_P.Memory4_InitialCondition;\r\n    SIM0_DW.Memory_PreviousInput_c = SIM0_P.SRFlipFlop1_initial_condition;\r\n    SIM0_DW.Memory5_PreviousInput = SIM0_P.Memory5_InitialCondition;\r\n    SIM0_DW.Delay1_DSTATE = SIM0_P.Delay1_InitialCondition;\r\n    SIM0_DW.Delay3_DSTATE[0] = SIM0_P.Delay3_InitialCondition;\r\n    SIM0_DW.Delay2_DSTATE[0] = SIM0_P.Delay2_InitialCondition;\r\n    SIM0_DW.Delay3_DSTATE[1] = SIM0_P.Delay3_InitialCondition;\r\n    SIM0_DW.Delay2_DSTATE[1] = SIM0_P.Delay2_InitialCondition;\r\n    SIM0_DW.Memory6_PreviousInput = SIM0_P.Memory6_InitialCondition;\r\n    SIM0_DW.Memory7_PreviousInput = SIM0_P.Memory7_InitialCondition;\r\n    SIM0_DW.Memory22_PreviousInput = SIM0_P.Memory22_InitialCondition;\r\n    SIM0_DW.Memory17_PreviousInput = SIM0_P.Memory17_InitialCondition;\r\n    SIM0_DW.Memory16_PreviousInput = SIM0_P.Memory16_InitialCondition;\r\n    SIM0_DW.Memory18_PreviousInput = SIM0_P.Memory18_InitialCondition;\r\n    SIM0_DW.Memory_PreviousInput_a = SIM0_P.Memory_InitialCondition;\r\n    SIM0_DW.Memory13_PreviousInput = SIM0_P.Memory13_InitialCondition;\r\n    SIM0_DW.Memory14_PreviousInput = SIM0_P.Memory14_InitialCondition;\r\n    SIM0_DW.Memory8_PreviousInput = SIM0_P.Memory8_InitialCondition;\r\n  }\r\n}\r\n\r\nvoid SIM0_terminate(void)\r\n{\r\n}\r\n"},{"name":"SIM0.h","type":"header","group":"model","path":"C:\\Users\\oscar\\Documents\\GitHub\\AMS-model\\Batteri256\\Code\\SIM0_ert_rtw","tag":"","groupDisplay":"Model files","code":"#ifndef RTW_HEADER_SIM0_h_\r\n#define RTW_HEADER_SIM0_h_\r\n#ifndef SIM0_COMMON_INCLUDES_\r\n#define SIM0_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#endif\r\n\r\n#include \"SIM0_types.h\"\r\n\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\ntypedef struct {\r\n  real_T Delay1_DSTATE;\r\n  real_T Delay3_DSTATE[2];\r\n  real_T Delay2_DSTATE[2];\r\n  real_T Memory15_PreviousInput[126];\r\n  real_T Memory12_PreviousInput[126];\r\n  real_T Memory20_PreviousInput;\r\n  real_T Memory11_PreviousInput;\r\n  real_T Memory_PreviousInput[126];\r\n  real_T Memory10_PreviousInput[126];\r\n  real_T Memory9_PreviousInput;\r\n  real_T Memory19_PreviousInput[126];\r\n  real_T Memory21_PreviousInput[126];\r\n  real_T Memory1_PreviousInput;\r\n  real_T Memory2_PreviousInput;\r\n  real_T Memory3_PreviousInput;\r\n  real_T Memory4_PreviousInput;\r\n  real_T Memory5_PreviousInput;\r\n  real_T Memory6_PreviousInput;\r\n  real_T Memory7_PreviousInput;\r\n  real_T Memory22_PreviousInput;\r\n  real_T Memory17_PreviousInput;\r\n  real_T Memory16_PreviousInput;\r\n  real_T Memory18_PreviousInput;\r\n  real_T Memory_PreviousInput_a;\r\n  real_T Memory13_PreviousInput;\r\n  real_T Memory14_PreviousInput;\r\n  real_T Memory8_PreviousInput;\r\n  boolean_T Memory_PreviousInput_m;\r\n  boolean_T Memory_PreviousInput_c;\r\n} DW_SIM0_T;\r\n\r\ntypedef struct {\r\n  real_T AMS_error;\r\n  real_T AMS_error_reset;\r\n  real_T IMD_error;\r\n  real_T IMD_error_reset;\r\n  real_T SC;\r\n  real_T EnableAirMinus;\r\n  real_T EnableAirPlus;\r\n  real_T EnablePrecharge;\r\n  real_T VoltageLimit;\r\n  real_T CurrentLimit;\r\n  real_T EnableCharge;\r\n  real_T charge;\r\n  real_T drive;\r\n  real_T BalanceOut[126];\r\n  real_T drive_current;\r\n} ExtU_SIM0_T;\r\n\r\ntypedef struct {\r\n  boolean_T AMS_error_latched;\r\n  boolean_T IMD_error_latched;\r\n  real_T SC_probe;\r\n  real_T AIR_minus_closed;\r\n  real_T AIR_plus_closed;\r\n  real_T precharge_closed;\r\n  real_T vehicle_voltage;\r\n  real_T current;\r\n  real_T accumulator_voltage;\r\n  real_T cell_voltages[126];\r\n  real_T cell_socs[126];\r\n  real_T cell_capacities[126];\r\n  real_T cell_temperatures[60];\r\n  real_T IMD_ok;\r\n} ExtY_SIM0_T;\r\n\r\nstruct P_SIM0_T_ {\r\n  real_T C_r;\r\n  real_T Cap_det;\r\n  real_T IMD_ok;\r\n  real_T R_short;\r\n  real_T Rp[13];\r\n  real_T Rs[13];\r\n  real_T Ts;\r\n  real_T cCap[126];\r\n  real_T cQur[126];\r\n  real_T cTmp[60];\r\n  real_T ocv[13];\r\n  real_T soc[13];\r\n  real_T tau[13];\r\n  boolean_T SRFlipFlop2_initial_condition;\r\n  boolean_T SRFlipFlop1_initial_condition;\r\n  real_T Memory15_InitialCondition;\r\n  real_T Memory12_InitialCondition[126];\r\n  real_T Memory20_InitialCondition;\r\n  real_T Memory11_InitialCondition;\r\n  real_T Memory9_InitialCondition;\r\n  real_T Memory19_InitialCondition;\r\n  real_T Memory21_InitialCondition;\r\n  real_T Gain_Gain;\r\n  real_T Constant1_Value;\r\n  real_T Memory1_InitialCondition;\r\n  real_T Memory2_InitialCondition;\r\n  real_T Memory3_InitialCondition;\r\n  real_T Memory4_InitialCondition;\r\n  real_T Memory5_InitialCondition;\r\n  real_T Delay1_InitialCondition;\r\n  real_T Delay3_InitialCondition;\r\n  real_T Delay2_InitialCondition;\r\n  real_T Memory6_InitialCondition;\r\n  real_T Memory7_InitialCondition;\r\n  real_T Memory22_InitialCondition;\r\n  real_T Memory17_InitialCondition;\r\n  real_T Memory16_InitialCondition;\r\n  real_T Memory18_InitialCondition;\r\n  real_T Memory_InitialCondition;\r\n  real_T Memory13_InitialCondition;\r\n  real_T Memory14_InitialCondition;\r\n  real_T Memory8_InitialCondition;\r\n  boolean_T Logic_table[16];\r\n  boolean_T Logic_table_p[16];\r\n};\r\n\r\nstruct tag_RTM_SIM0_T {\r\n  const char_T * volatile errorStatus;\r\n};\r\n\r\nextern P_SIM0_T SIM0_P;\r\nextern DW_SIM0_T SIM0_DW;\r\nextern ExtU_SIM0_T SIM0_U;\r\nextern ExtY_SIM0_T SIM0_Y;\r\nextern void SIM0_initialize(void);\r\nextern void SIM0_step(void);\r\nextern void SIM0_terminate(void);\r\nextern RT_MODEL_SIM0_T *const SIM0_M;\r\n\r\n#endif\r\n\r\n"},{"name":"SIM0_private.h","type":"header","group":"model","path":"C:\\Users\\oscar\\Documents\\GitHub\\AMS-model\\Batteri256\\Code\\SIM0_ert_rtw","tag":"","groupDisplay":"Model files","code":"#ifndef RTW_HEADER_SIM0_private_h_\r\n#define RTW_HEADER_SIM0_private_h_\r\n#include \"rtwtypes.h\"\r\n#endif\r\n\r\n"},{"name":"SIM0_types.h","type":"header","group":"model","path":"C:\\Users\\oscar\\Documents\\GitHub\\AMS-model\\Batteri256\\Code\\SIM0_ert_rtw","tag":"","groupDisplay":"Model files","code":"#ifndef RTW_HEADER_SIM0_types_h_\r\n#define RTW_HEADER_SIM0_types_h_\r\n\r\ntypedef struct P_SIM0_T_ P_SIM0_T;\r\ntypedef struct tag_RTM_SIM0_T RT_MODEL_SIM0_T;\r\n\r\n#endif\r\n\r\n"},{"name":"SIM0_data.c","type":"source","group":"data","path":"C:\\Users\\oscar\\Documents\\GitHub\\AMS-model\\Batteri256\\Code\\SIM0_ert_rtw","tag":"","groupDisplay":"Data files","code":"#include \"SIM0.h\"\r\n\r\nP_SIM0_T SIM0_P = {\r\n\r\n  6.6,\r\n\r\n  -1.0E-7,\r\n\r\n  1.0,\r\n\r\n  33.0,\r\n\r\n\r\n  { 0.0013284973182, 0.00132849731829051, 0.00133071540686515,\r\n    0.00133106364620441, 0.00133282418704394, 0.00133927918011939,\r\n    0.00135371077616641, 0.00137940112592065, 0.00141963238011775,\r\n    0.00147768668949337, 0.00155684620478314, 0.00166039307672272,\r\n    0.00179160945604776 },\r\n\r\n\r\n  { 0.0044622496006, 0.00446224960061823, 0.00395928973129493,\r\n    0.00365723545490869, 0.00346135878439388, 0.00332839611795259,\r\n    0.00323577769308545, 0.00317057626115591, 0.00312485453442757,\r\n    0.00309346940400882, 0.00307294184679812, 0.00306083426030356,\r\n    0.00305538791678206 },\r\n\r\n  0.2,\r\n\r\n\r\n  { 23992.347012624476, 24186.387557408943, 23387.191258276496,\r\n    23523.545416242814, 25783.690886603054, 21501.646029503809,\r\n    25989.445680456898, 24097.563700613107, 24760.060819589125,\r\n    22095.835525012939, 23169.96543579478, 23481.93583623469, 24182.715691220477,\r\n    22089.799302149528, 24231.634326416304, 22547.152800325541,\r\n    23826.190048424611, 24412.355888661376, 24087.059967177087,\r\n    24842.633504236757, 24766.077110819053, 23109.092263402246,\r\n    24017.05615743397, 22815.62219359578, 22438.211478607438, 24684.825933493707,\r\n    23760.049849075251, 23705.081085390593, 24671.12726565386,\r\n    24354.583697409053, 24110.201173874535, 25010.251228304995,\r\n    24689.789458557716, 23999.763257058581, 23069.638896888773,\r\n    23108.446358249719, 24952.101870531271, 22148.169611322188,\r\n    23735.538063364082, 21811.1528231011, 24780.498014452653, 24621.716302393419,\r\n    23761.162083483512, 23689.162786839519, 21273.716079296722,\r\n    24341.172322675924, 21567.565080034095, 21440.719693356696,\r\n    23839.933710298439, 22811.519016429495, 24171.490621423374,\r\n    24436.97780568403, 24617.732545205356, 23068.84087461701, 24209.377623166849,\r\n    23860.633350315078, 24586.069998469924, 24296.157079925917,\r\n    24657.888425985075, 23628.062132075418, 23612.798543848734,\r\n    24767.773405305437, 21636.344537584249, 23255.413594485992,\r\n    22489.405550191339, 23377.41519729235, 24408.679262048619,\r\n    24585.727149241757, 22745.056357319863, 23288.930087316832,\r\n    23897.024874130049, 23468.136624246428, 24061.818555261005, 24159.9309429558,\r\n    22830.038441059871, 23583.169734070769, 21627.905400838466,\r\n    24905.361710518475, 23130.909239005843, 22556.15002599778,\r\n    23506.055316577189, 22331.353135367903, 23739.1423822984, 23199.335003471817,\r\n    25937.778709184153, 24898.465387329594, 21263.1134968155, 24201.32693172761,\r\n    22361.862124188927, 23504.944820119195, 23924.404073318728,\r\n    24507.734028808121, 23486.953050597094, 25336.300146546077,\r\n    23279.062848221154, 24087.512120829684, 24424.734120627596,\r\n    23845.188592721159, 24640.952785381047, 24083.213137847597,\r\n    22975.853816335912, 21954.62664861391, 25618.592948555706, 23155.46991122554,\r\n    23863.359722310648, 24323.166955145978, 23873.596996734002,\r\n    22855.273787201968, 23292.285417548144, 23635.110052776894,\r\n    25238.958491504029, 22899.184309993037, 24544.668467287822,\r\n    24068.62313994853, 23526.139957870848, 22703.027254039869,\r\n    23475.859045373836, 23673.309717540695, 22290.604925513642,\r\n    23952.182244870786, 22937.706723709824, 23665.759412040275,\r\n    24096.21334095424, 22855.345940753163, 23471.743638794305,\r\n    24110.062757534179 },\r\n\r\n\r\n  { 11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0,\r\n    11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0,\r\n    11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0,\r\n    11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0,\r\n    11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0,\r\n    11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0,\r\n    11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0,\r\n    11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0,\r\n    11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0,\r\n    11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0,\r\n    11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0,\r\n    11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0,\r\n    11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0,\r\n    11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0,\r\n    11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0,\r\n    11880.0, 11880.0, 11880.0, 11880.0, 11880.0, 11880.0 },\r\n\r\n\r\n  { 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0,\r\n    20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0,\r\n    20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0,\r\n    20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0,\r\n    20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0 },\r\n\r\n\r\n  { 0.0, 2.99808472821531, 3.29015678205606, 3.51449858492796, 3.66802196422992,\r\n    3.76050972589663, 3.81021773542304, 3.83947699888896, 3.87029574398353,\r\n    3.91996150102984, 3.99664318400941, 4.09499317158672, 4.19174938813381 },\r\n\r\n\r\n  { 0.0, 0.01, 0.0909090909090909, 0.181818181818182, 0.272727272727273,\r\n    0.363636363636364, 0.454545454545455, 0.545454545454545, 0.636363636363636,\r\n    0.727272727272727, 0.818181818181818, 0.909090909090909, 1.0 },\r\n\r\n\r\n  { 950.87194683, 950.871946837005, 952.459545918238, 952.715608141667,\r\n    956.801088701637, 1116.9800008749899, 2163.29230815358, 2204.3466729378397,\r\n    1183.99583949683, 1060.79424954235, 1114.3206284707098, 1188.42633649718,\r\n    1282.34445639369 },\r\n\r\n  false,\r\n\r\n  false,\r\n\r\n  0.0,\r\n\r\n\r\n  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\r\n    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\r\n    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\r\n    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\r\n    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\r\n    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\r\n    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\r\n    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\r\n    0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },\r\n\r\n  0.0,\r\n\r\n  0.0,\r\n\r\n  0.0,\r\n\r\n  0.0,\r\n\r\n  0.0,\r\n\r\n  -1.0,\r\n\r\n  0.0,\r\n\r\n  0.0,\r\n\r\n  0.0,\r\n\r\n  0.0,\r\n\r\n  0.0,\r\n\r\n  0.0,\r\n\r\n  0.0,\r\n\r\n  0.0,\r\n\r\n  0.0,\r\n\r\n  0.0,\r\n\r\n  0.0,\r\n\r\n  0.0,\r\n\r\n  0.0,\r\n\r\n  0.0,\r\n\r\n  0.0,\r\n\r\n  0.0,\r\n\r\n  0.0,\r\n\r\n  0.0,\r\n\r\n  0.0,\r\n\r\n\r\n  { false, true, false, false, true, true, false, false, true, false, true, true,\r\n    false, false, false, false },\r\n\r\n\r\n  { false, true, false, false, true, true, false, false, true, false, true, true,\r\n    false, false, false, false }\r\n};\r\n"},{"name":"look1_binlxpw.c","type":"source","group":"sharedutility","path":"C:\\Users\\oscar\\Documents\\GitHub\\AMS-model\\Batteri256\\Code\\slprj\\ert\\_sharedutils","tag":"","groupDisplay":"Shared files","code":"#include \"look1_binlxpw.h\"\r\n#include \"rtwtypes.h\"\r\n\r\nreal_T look1_binlxpw(real_T u0, const real_T bp0[], const real_T table[],\r\n                     uint32_T maxIndex)\r\n{\r\n  real_T frac;\r\n  real_T yL_0d0;\r\n  uint32_T iLeft;\r\n  if (u0 <= bp0[0U]) {\r\n    iLeft = 0U;\r\n    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);\r\n  } else if (u0 < bp0[maxIndex]) {\r\n    uint32_T bpIdx;\r\n    uint32_T iRght;\r\n    bpIdx = maxIndex >> 1U;\r\n    iLeft = 0U;\r\n    iRght = maxIndex;\r\n    while (iRght - iLeft > 1U) {\r\n      if (u0 < bp0[bpIdx]) {\r\n        iRght = bpIdx;\r\n      } else {\r\n        iLeft = bpIdx;\r\n      }\r\n\r\n      bpIdx = (iRght + iLeft) >> 1U;\r\n    }\r\n\r\n    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);\r\n  } else {\r\n    iLeft = maxIndex - 1U;\r\n    frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);\r\n  }\r\n\r\n  yL_0d0 = table[iLeft];\r\n  return (table[iLeft + 1U] - yL_0d0) * frac + yL_0d0;\r\n}\r\n"},{"name":"look1_binlxpw.h","type":"header","group":"sharedutility","path":"C:\\Users\\oscar\\Documents\\GitHub\\AMS-model\\Batteri256\\Code\\slprj\\ert\\_sharedutils","tag":"","groupDisplay":"Shared files","code":"#ifndef RTW_HEADER_look1_binlxpw_h_\r\n#define RTW_HEADER_look1_binlxpw_h_\r\n#include \"rtwtypes.h\"\r\n\r\nextern real_T look1_binlxpw(real_T u0, const real_T bp0[], const real_T table[],\r\n  uint32_T maxIndex);\r\n\r\n#endif\r\n\r\n"},{"name":"rtwtypes.h","type":"header","group":"sharedutility","path":"C:\\Users\\oscar\\Documents\\GitHub\\AMS-model\\Batteri256\\Code\\slprj\\ert\\_sharedutils","tag":"","groupDisplay":"Shared files","code":"#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n\r\ntypedef void * pointer_T;\r\n\r\n#endif\r\n\r\n"}]};